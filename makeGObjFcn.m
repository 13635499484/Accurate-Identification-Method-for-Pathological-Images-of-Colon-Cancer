
function ObjFcn = makeGObjFcn(XTrain,YTrain,XValidation,YValidation,net,net_name)
    if nargin<6
        net_name='net';
    end

    ObjFcn = @valErrorFun;
    function [valError,cons,fileName] = valErrorFun(optVars)
% %         debug
%         optVars.InitialLearnRate = 3e-4;
%         optVars.Momentum = 0.8;
%         optVars.L2Regularization = 1e-10;
%         XValidation = XTest;
%         YValidation = YTest;
%         
    %% set the training args
        inputSize = net.Layers(1).InputSize;
        XTrain = imresize(XTrain,inputSize(1:2));% Chane the size of picture dataset
        XValidation = imresize(XValidation,inputSize(1:2));
    %
        miniBatchSize = 10;
        validationFrequency = floor(numel(YTrain)/miniBatchSize);
        options = trainingOptions('sgdm', ...
            'InitialLearnRate',optVars.InitialLearnRate, ...
            'Momentum',optVars.Momentum, ...
            'MaxEpochs',5, ...
            'LearnRateSchedule','piecewise', ...
            'LearnRateDropPeriod',40, ...
            'LearnRateDropFactor',0.1, ...
            'MiniBatchSize',miniBatchSize, ...
            'L2Regularization',optVars.L2Regularization, ...
            'Shuffle','every-epoch', ...
            'Verbose',false, ...
            'Plots','training-progress', ...
            'ValidationData',{XValidation,YValidation}, ...
            'ValidationFrequency',validationFrequency, ...
            'ExecutionEnvironment','gpu');
        
        
        %enhance data
        pixelRange = [-30 30];
        scaleRange = [0.9 1.1];
        imageAugmenter = imageDataAugmenter( ...
            'RandXReflection',true, ...
            'RandRotation',pixelRange, ...
            'RandYReflection',true, ...
            'RandXTranslation',pixelRange, ...
            'RandYTranslation',pixelRange, ...
            'RandXScale',scaleRange, ...
            'RandYScale',scaleRange,...
            'RandXShear',pixelRange, ...
            'RandYShear',pixelRange);
        
        datasource = augmentedImageDatastore(inputSize(1:2),XTrain,YTrain,'DataAugmentation',imageAugmenter);
        
        trainedNet = trainNetwork(datasource,net,options);
        close(findall(groot,'Tag','NNET_CNN_TRAININGPLOT_FIGURE'))
        YPredicted = classify(trainedNet,XValidation);
        valError = 1 - mean(YPredicted == YValidation);
        fileName = "BestNet\\"+ net_name + "_"+num2str(valError) +"_"+ ".mat";
        %save the best net
        
        Net_tmp = dir("BestNet\\"+ net_name+"*.mat");
        val=1;
        if ~isempty(Net_tmp)
            vals = split(Net_tmp(1).name,"_");
            val = vals{2};
            val = str2double(val);
        end
        if valError<val
            save(fileName,'trainedNet')
        end
        cons = [];
    end
end